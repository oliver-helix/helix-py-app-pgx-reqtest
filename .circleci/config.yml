# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Use a package of configuration called an orb, see https://circleci.com/docs/2.0/orb-intro/
orbs:
  # aws-cli: circleci/aws-cli@2.0.0
  aws-assume-role: holdaraffle/aws-assume-role@0.0.10

executors:
  default:
    docker:
      - image: circleci/python:3.5.7
        environment:
          AWS_DEFAULT_REGION: us-east-1
          AWS_DEFAULT_OUTPUT: json

# Define a job to be invoked later in a workflow. See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    description: Builds the Docker image
    executor: default
    steps:
      - checkout
      - setup_remote_docker
  
      - attach_workspace: &tmp_workspace
          at: /tmp/workspace

      # # Running orbs
      # - aws-cli/setup
      
      - aws-assume-role/assume_role: &assume_role
          profile_name: ${ASSUME_AWS_PROFILE} # from context: ci
          account: ${AWS_ACCOUNT_ID} # from context: ci
          role: ${ASSUME_AWS_PROFILE} # from context: ci

      - run: &ecr_login
          name: AWS ECR Login
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} --profile ${ASSUME_AWS_PROFILE} | \
            docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com

      - run:
          name: Build Docker Image
          command: |
            set -x
            cd /tmp/src
            docker-compose build

  push-image:
      description: Pushes Docker image.
      executor: default
      steps:
        - checkout
        - setup_remote_docker
      
        - attach_workspace:
            <<: *tmp_workspace

        - aws-assume-role/assume_role:
            <<: *assume_role

        # # Running orbs
        # - aws-cli/setup

        - run:
            <<: *ecr_login

        - run:
            name: "Push image from local file"
            command: |
              set -x
              export AWS_ECR_ACCOUNT_URL=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
              if [[ -z "${CIRCLE_TAG}" ]]
              then
                echo "No tag found, using SHA: ${CIRCLE_SHA1}"
                versioned_docker_tag="${AWS_ECR_ACCOUNT_URL}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
              else
                echo "Using git tag: ${CIRCLE_TAG}"
                versioned_docker_tag="${AWS_ECR_ACCOUNT_URL}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"
              fi
              latest_docker_tag="${AWS_ECR_ACCOUNT_URL}/${CIRCLE_PROJECT_REPONAME}:latest"
              echo -e "Docker image will be tagged:\n${versioned_docker_tag}\n${latest_docker_tag}"
              docker load --input /tmp/workspace/image.tar
              docker tag ${CIRCLE_PROJECT_REPONAME}:latest ${versioned_docker_tag}
              docker tag ${CIRCLE_PROJECT_REPONAME}:latest ${latest_docker_tag}
              aws ecr describe-repositories --repository-names ${CIRCLE_PROJECT_REPONAME} || aws ecr create-repository --repository-name ${CIRCLE_PROJECT_REPONAME}
              docker push ${versioned_docker_tag}
              docker push ${latest_docker_tag}

  test:
    description: Run pytest and integration test.
    executor: default
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Run pytest
          # /pgx-verification defined as WORKDIR in Dockerfile
          command: |
            docker run ${CIRCLE_PROJECT_REPONAME} sh -c \
            "cd /pgx-verification && pytest"

      - run:
          name: Run integration_test.sh
          command: |
            docker run ${CIRCLE_PROJECT_REPONAME} sh -c \
            "cd /pgx-verification && bash integration_test.sh"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  main:
    jobs:
      - build:
          name: Build
          context: basic
          filters: &tag-only
            tags:
              only: /.*/
      - push-image:
          name: Push
          context: basic
          filters:
            <<: *tag-only
            branches:
              only: main
          requires: 
            - Build
            - Test
            - Save
      - test:
          name: Test
          context: basic
          filters:
            <<: *tag-only
          requires:
            - Build