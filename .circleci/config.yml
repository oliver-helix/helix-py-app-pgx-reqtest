# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Use a package of configuration called an orb, see https://circleci.com/docs/2.0/orb-intro/
orbs:
  aws-assume-role: holdaraffle/aws-assume-role@0.0.10

executors:
  default:
    docker:
      - image: circleci/python:3.5.7

# Define a job to be invoked later in a workflow. See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-push:
    description: Builds the Docker image and pushes to AWS ECR
    executor: default
    steps:
      - checkout
      - setup_remote_docker
  
      - attach_workspace: &tmp_workspace
          at: /tmp/workspace

      # - aws-assume-role/assume_role: &assume_role
      #     # environment variables from context: basic
      #     profile_name: ${ASSUME_AWS_PROFILE} 
      #     account: ${AWS_ACCOUNT_ID} 
      #     role: ${ASSUME_AWS_PROFILE}

      # - run: &ecr_login
      #     name: AWS ECR Login
      #     command: |
      #       aws ecr get-login-password --region ${AWS_DEFAULT_REGION} --profile ${ASSUME_AWS_PROFILE} | \
      #       docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com

      - run: &ecr_login
          name: AWS ECR Login
          command: |
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)

      - run:
          name: Create and Save Environment Variables
          command: |
            export AWS_ECR_ENDPOINT=820411415250.dkr.ecr.us-east-1.amazonaws.com
            export DOCKER_TAG_BASE=${AWS_ECR_ENDPOINT}/${CIRCLE_PROJECT_REPONAME}

            {
              echo "export AWS_ECR_ENDPOINT=${AWS_ECR_ENDPOINT}"
              echo "export DOCKER_TAG_BASE=${DOCKER_TAG_BASE}"
              echo "export DOCKER_TAG=${DOCKER_TAG_BASE}:${CIRCLE_SHA1}"
              echo "export DOCKER_TAG_LATEST=${DOCKER_TAG_BASE}:latest"
            } >> /tmp/workspace/bashvars

      - run: &load_env_vars 
          name: Load Environment Variables
          command: |
            cat /tmp/workspace/bashvars
            cat /tmp/workspace/bashvars >> ${BASH_ENV}

      - run:
          name: Build Docker Image
          command: |
            set -x
            docker build --build-arg PGX_DOCKER_TAG=4.0.4 -t ${DOCKER_TAG_BASE} .
            docker tag ${DOCKER_TAG_BASE} ${DOCKER_TAG}
            docker tag ${DOCKER_TAG} ${DOCKER_TAG_LATEST}
        
      - run:
          name: Push Docker Image to AWS ECR
          command: |
            set -x
            echo $(docker images)
            docker push ${DOCKER_TAG}
            docker push ${DOCKER_TAG_LATEST}

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - bashvars

  test:
    description: Run pytest and integration test.
    executor: default
    steps:
      - checkout
      - setup_remote_docker

      - attach_workspace:
          <<: *tmp_workspace

      - run:
          <<: *ecr_login
      
      - run:
          <<: *load_env_vars

      - run:
          name: Run pytest
          # /pgx-verification defined as WORKDIR in Dockerfile
          command: |
            docker run ${CIRCLE_PROJECT_REPONAME} sh -c \
            "cd /pgx-verification && pytest"

      - run:
          name: Run integration_test.sh
          command: |
            docker run ${CIRCLE_PROJECT_REPONAME} sh -c \
            "cd /pgx-verification && bash integration_test.sh"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  main:
    jobs:
      - build-and-push:
          name: Build and Push
          context: basic
          filters:
            tags:
              only: /.*/
            # branches:
            #   only: main
      # - test:
      #     name: Test
      #     context: basic
      #     filters:
      #       <<: *tag-only
      #     requires:
      #       - Build
      #       - Push
